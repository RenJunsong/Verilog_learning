//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 4? 28 2020 14:49:47
//
//      Input file      : 
//      Component name  : n_c_core
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module n_c_core(clk, m_lsw, ce, n_c, done);
   input            clk;
   input [15:0]     m_lsw;
   input            ce;
   output [15:0]    n_c;
   output           done;
   reg              done;
   
   
   parameter [2:0]  stateNC_type_stNC_idle = 0,
                    stateNC_type_stNC_step1 = 1,
                    stateNC_type_stNC_step2 = 2,
                    stateNC_type_stNC_step3 = 3,
                    stateNC_type_stNC_step4 = 4,
                    stateNC_type_stNC_fin = 5;
   
   reg [2:0]        stateNC;
   reg              NC_complete;
   reg              NC_start;
   reg [15:0]       LSW_M;
   wire [2:0]       adr_tbl;
   reg [3:0]        X0_tbl;
   reg [3:0]        Z0_tbl;
   reg [3:0]        X1_tbl;
   wire [3:0]       V1x9;
   wire [15:0]      TforNC;
   wire [15:0]      not_TforNCPl3;
   reg [15:0]       NC;
   reg [15:0]       t_NC;
   wire [15:0]      t_NC_out;
   wire             b2equalb1;
   
   wire [19:0]      DUMMY_SIM0;
   wire [19:0]      DUMMY_SIM1;
   wire [35:0]      mul1;
   wire [35:0]      mul2;
   
   assign mul1 = ({2'b00, t_NC}) * ({2'b00, LSW_M});
   assign TforNC = mul1[15:0];
   assign mul2 = ({2'b00, t_NC}) * ({2'b00, not_TforNCPl3});
   assign t_NC_out = mul2[15:0];
   
   
   always @(posedge clk or posedge NC_complete)
   begin: WRITELSWM_PROCESS
      if (NC_complete == 1'b1)
         NC_start <= 1'b0;
      else 
      begin
         if (ce == 1'b1)
         begin
            LSW_M <= m_lsw;
            NC_start <= 1'b1;
         end
      end
   end
   
   always @(adr_tbl)
   begin: X0_ROM
      case (adr_tbl)
         3'b000 :
            X0_tbl <= 4'hF;
         3'b001 :
            X0_tbl <= 4'h5;
         3'b010 :
            X0_tbl <= 4'h3;
         3'b011 :
            X0_tbl <= 4'h9;
         3'b100 :
            X0_tbl <= 4'h7;
         3'b101 :
            X0_tbl <= 4'hD;
         3'b110 :
            X0_tbl <= 4'hB;
         default :
            X0_tbl <= 4'h1;
      endcase
   end
   
   always @(adr_tbl)
   begin: Z0_ROM
      case (adr_tbl)
         3'b000 :
            Z0_tbl <= 4'hF;
         3'b001 :
            Z0_tbl <= 4'h5;
         3'b010 :
            Z0_tbl <= 4'h3;
         3'b011 :
            Z0_tbl <= 4'h4;
         3'b100 :
            Z0_tbl <= 4'hC;
         3'b101 :
            Z0_tbl <= 4'h5;
         3'b110 :
            Z0_tbl <= 4'h3;
         default :
            Z0_tbl <= 4'h1;
      endcase
   end
   
   always @(b2equalb1 or LSW_M or Z0_tbl or V1x9)
   begin: X1_ROM
      if (b2equalb1 == 1'b0)
         X1_tbl <= LSW_M[7:4] + Z0_tbl;
      else
         X1_tbl <= V1x9 + Z0_tbl;
   end
   
   always @(posedge clk)
   begin: STATE_NC_PROCESS
      
      begin
         if (NC_start == 1'b0)
         begin
            NC_complete <= 1'b0;
            stateNC <= stateNC_type_stNC_idle;
            done <= 1'b0;
         end
         else
            case (stateNC)
               stateNC_type_stNC_idle :
                  begin
                     done <= 1'b0;
                     stateNC <= stateNC_type_stNC_step1;
                     t_NC <= {8'h00, X1_tbl, X0_tbl};
                  end
               stateNC_type_stNC_step1 :
                  begin
                     t_NC <= t_NC_out;
                     stateNC <= stateNC_type_stNC_step2;
                  end
               stateNC_type_stNC_step2 :
                  begin
                     t_NC <= t_NC_out;
                     stateNC <= stateNC_type_stNC_step3;
                  end
               stateNC_type_stNC_step3 :
                  begin
                     t_NC <= t_NC_out;
                     stateNC <= stateNC_type_stNC_step4;
                  end
               stateNC_type_stNC_step4 :
                  begin
                     t_NC <= t_NC_out;
                     stateNC <= stateNC_type_stNC_fin;
                  end
               stateNC_type_stNC_fin :
                  begin
                     NC_complete <= 1'b1;
                     done <= 1'b1;
                     stateNC <= stateNC_type_stNC_idle;
                     NC <= {((~(t_NC[15:1]))), 1'b1};
                  end
               default :
                  stateNC <= stateNC_type_stNC_idle;
            endcase
      end
   end
   assign not_TforNCPl3 = ((~TforNC)) + 3;
   assign adr_tbl = LSW_M[3:1];
   assign V1x9 = ({LSW_M[4], 3'b000}) + LSW_M[7:4];
   assign b2equalb1 = LSW_M[5] ^ LSW_M[6];
   assign n_c = NC;
   
endmodule
